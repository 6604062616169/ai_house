import streamlit as st
import pandas as pd
import numpy as np
import joblib
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="AI Web App", layout="wide")

# ‡πÉ‡∏ä‡πâ session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤
if "page" not in st.session_state:
    st.session_state.page = "Machine Learning"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
def change_page(new_page):
    st.session_state.page = new_page

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á (Navigation Buttons)
col1, col2, col3, col4 = st.columns(4)
with col1:
    if st.button("ü§ñ Machine Learning"):
        change_page("Machine Learning")
with col2:
    if st.button("üè° Demo Machine Learning üá∫üá∏"):
        change_page("Demo Machine Learning")
with col3:
    if st.button("üß† Neural Network"):
        change_page("Neural Network")
with col4:
    if st.button("üê±üê∂ Demo Neural Network"):
        change_page("Demo Neural Network")

st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô‡∏´‡∏ô‡πâ‡∏≤

# üü¢ ‡∏´‡∏ô‡πâ‡∏≤ Machine Learning
if st.session_state.page == "Machine Learning":
    st.title("ü§ñ Machine Learning: House Price Prediction")

    st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dataset ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ")
    st.write(
        """
        **Kaggle House Prices Dataset**
        - ‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô ChatGPT ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Kaggle ‡∏Ñ‡πà‡∏∞
        - ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á Ames, Iowa, USA ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô  
        -  data source: [Kaggle](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques)  
        """
    )
    st.subheader("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write(
        """
        ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô :
        - **LotArea** (‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô, ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ü‡∏∏‡∏ï)  
        - **BedroomAbvGr** (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô)  
        - **FullBath** (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥)  
        - **SalePrice** (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô)  
        """
    )
    st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Colab")
    st.write(
        " **‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Dataset**\n"
        "```python\n"
        "from google.colab import files \n"
        "uploaded = files.upload() \n"
        "```\n"
        "‡πÉ‡∏ä‡πâ `files.upload()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ZIP ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á \n"

        " **‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå ZIP**\n"
        "```python\n"
        "!unzip house.zip \n"
        "```\n"
        "‡πÉ‡∏ä‡πâ `!unzip house.zip` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå\n"

        " **‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**\n"
        "```python\n"
        "train_data = pd.read_csv('train.csv')\n"
        "test_data = pd.read_csv('test.csv')\n"
        "```\n"
        "- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå `train.csv` ‡πÅ‡∏•‡∏∞ `test.csv` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n"
    )

    st.subheader("‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ (Missing Data)")
    st.write(
        """
        - ‡πÉ‡∏ä‡πâ `.isnull().sum()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢  
        - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢:
        ```python
        for col in train_data.columns:
            if train_data[col].isnull().sum() > 0:
                if train_data[col].dtype == 'object':
                    train_data[col].fillna("None", inplace=True)
                else:
                    train_data[col].fillna(train_data[col].median(), inplace=True)
        ```
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ `None` ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°  
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô (Median) ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç  
        """
    )

    st.subheader("One-Hot Encoding ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ Train/Test ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
    st.write(
        """
        - ‡πÉ‡∏ä‡πâ One-Hot Encoding ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç  
        - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ `train_data` ‡πÅ‡∏•‡∏∞ `test_data` ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô  
        ```python
        train_data, test_data = train_data.align(test_data, join='left', axis=1, fill_value=0)
        ```
        """
    )

    st.subheader("‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏• RandomForest")
    st.write(
        """
        - ‡πÉ‡∏ä‡πâ `RandomForestRegressor` ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•  
        ```python
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        ```
        - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ Mean Absolute Error (MAE)
        ```python
        y_pred = model.predict(X_valid)
        mae = mean_absolute_error(y_valid, y_pred)
        print(f'Mean Absolute Error: {mae}')
        ```
        """
    )

    st.subheader("‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.write(
        """
        - ‡πÉ‡∏ä‡πâ `joblib` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        ```python
        joblib.dump(model, 'house_price_model.pkl')
        ```
        - ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        ```python
        model = joblib.load('house_price_model.pkl')
        ```
        """
    )

    st.subheader("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
    st.write(
        """
        - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á  
        ```python
        sample_data = pd.DataFrame(np.zeros((1, X_train.shape[1])), columns=X_train.columns)
        sample_data.loc[0, 'GrLivArea'] = 1000
        sample_data.loc[0, 'BedroomAbvGr'] = 2
        sample_data.loc[0, 'FullBath'] = 1

        predicted_price = model.predict(sample_data)[0]
        print(f"üè° ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${predicted_price:,.2f}")
        ```
        """
    )

    st.success("‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

# üü° ‡∏´‡∏ô‡πâ‡∏≤ Demo Machine Learning
elif st.session_state.page == "Demo Machine Learning":
    try:
        model = joblib.load('house_price_model.pkl')
    except Exception as e:
        st.error(f"Error loading model: {e}")
        st.stop()

    st.title("üè° House Price Prediction in us üá∫üá∏ ")
    sqft = st.number_input("üè† ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡∏ï‡∏£.‡∏ü‡∏∏‡∏ï)", min_value=500, max_value=10000, value=1000)
    bedrooms = st.number_input("üõè ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏≠‡∏ô", min_value=1, max_value=10, value=1)
    bathrooms = st.number_input("üõÅ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥", min_value=1, max_value=10, value=1)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    model_features = model.feature_names_in_
    input_data = pd.DataFrame(np.zeros((1, len(model_features))), columns=model_features)
    input_data.loc[0, 'GrLivArea'] = sqft
    input_data.loc[0, 'BedroomAbvGr'] = bedrooms
    input_data.loc[0, 'FullBath'] = bathrooms

    if st.button("üìå Predict Price"):
        try:
            predicted_price = model.predict(input_data)[0]
            st.success(f"üè° ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${predicted_price:,.2f}")
        except Exception as e:
            st.error(f"Prediction failed: {e}")
# üîµ ‡∏´‡∏ô‡πâ‡∏≤ Neural Network
elif st.session_state.page == "Neural Network":
    st.title("üß† Neural Network")
    st.write("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏´‡∏≤data set ‡∏ö‡∏ô‡πÄ‡∏ß‡πá‡∏û kiggle ‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏≤‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏Æ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏•‡∏¢‡πÄ‡∏à‡∏≠ dataset cat or dog‡πÄ‡∏•‡∏¢‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÅ‡∏¢‡∏Å‡∏´‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏°‡∏ß‡∏Å‡πá‡∏î‡∏π‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å https://www.kaggle.com/datasets/tongpython/cat-and-dog")
    st.image("https://img5.pic.in.th/file/secure-sv1/1c2f764fab9cfb22a.png", width=600, use_container_width=False)
    st.write("‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û api ‡∏Ç‡∏≠‡∏á kiggle ‡∏Ç‡∏∂‡πâ‡∏ô google colab ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏£‡πåzib ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏£‡πå‡∏ï‡πà‡∏≠")
    st.image("https://img5.pic.in.th/file/secure-sv1/27d9df771fce3f3ad.png", width=600, use_container_width=False)
    st.write("‡πÉ‡∏ä‡πâ ImageDataGenerator ‡∏à‡∏≤‡∏Å TensorFlow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏†‡∏≤‡∏û (Image Classification) ‡πÅ‡∏ö‡∏ö Binary Classification")
    st.image("https://img2.pic.in.th/pic/33d29ee08dd6fd275.png", width=600, use_container_width=False)
    st.write("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Convolutional Neural Network (CNN) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô Binary Classification ")
    st.write("3 ‡∏ä‡∏±‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Feature ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û")
    st.write("‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Feature Map")
    st.write("2 ‡∏ä‡∏±‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    st.write("‡πÉ‡∏ä‡πâ Sigmoid Activation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ")
    st.image("https://img2.pic.in.th/pic/418afd8ea65b7e17a.png", width=600, use_container_width=False)
    st.write("‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• (Training model)")
    st.image("https://img2.pic.in.th/pic/Screenshot-from-2025-03-12-23-45-52.png", width=600, use_container_width=False)
    st.write("code‡∏à‡∏∞plot‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Loss ‡πÅ‡∏•‡∏∞ Accuracy ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Overfitting ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    st.image("https://img2.pic.in.th/pic/6491366b23e31efd5.png", width=600, use_container_width=False)
    st.write("‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡πÑ‡∏°‡πà overfitting‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
    st.image("https://img5.pic.in.th/file/secure-sv1/810e34025f882f14e.png", width=600, use_container_width=False)
    st.write("code‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡πÅ‡∏¢‡∏Å‡∏´‡∏°‡∏≤‡πÅ‡∏°‡∏ß‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡πÅ‡∏•‡∏∞ savemodel ‡πÉ‡∏ô .h57")

# üî¥ ‡∏´‡∏ô‡πâ‡∏≤ Demo Neural Network (Cat vs Dog Classifier)
elif st.session_state.page == "Demo Neural Network":
    try:
        model = load_model('cat_dog_classifier.h5')
    except Exception as e:
        st.error(f"Error loading model: {e}")
        st.stop()

    st.title("üê±üê∂ Cat vs Dog Classifier")
    st.write("Upload an image of a cat or dog, and the AI will classify it!")

    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        img = image.load_img(uploaded_file, target_size=(150, 150))
        st.image(img, caption='Uploaded Image', use_column_width=True)

        img_array = image.img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        prediction = model.predict(img_array)

        if prediction[0] > 0.5:
            st.write("**Prediction:** This is a Dog! üê∂")
        else:
            st.write("**Prediction:** This is a Cat! üê±")
